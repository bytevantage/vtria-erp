const PDFDocument = require('pdfkit');
const fs = require('fs');
const path = require('path');

class DocumentGenerator {
    constructor() {
        this.companyConfig = {
            name: 'VTRIA Engineering Solutions Pvt Ltd',
            address: 'Mangalore, Karnataka, India',
            phone: '+91-XXXXXXXXXX',
            email: 'info@vtrai.com',
            gstin: '29XXXXXXXXXXXXX',
            logo: path.join(__dirname, '../assets/logo.png'), // Will be added later
            website: 'www.vtrai.com'
        };
    }

    // Generate PDF with company branding
    generatePDF(data, template, outputPath) {
        return new Promise((resolve, reject) => {
            try {
                const doc = new PDFDocument({
                    size: 'A4',
                    margin: 50,
                    bufferPages: true
                });

                const stream = fs.createWriteStream(outputPath);
                doc.pipe(stream);

                // Add company header
                this.addCompanyHeader(doc);

                // Generate content based on template
                switch (template) {
                    case 'quotation':
                        this.generateQuotationPDF(doc, data);
                        break;
                    case 'invoice':
                        this.generateInvoicePDF(doc, data);
                        break;
                    case 'delivery_challan':
                        this.generateDeliveryChallanPDF(doc, data);
                        break;
                    case 'purchase_order':
                        this.generatePurchaseOrderPDF(doc, data);
                        break;
                    case 'estimation':
                        this.generateEstimationPDF(doc, data);
                        break;
                    case 'bom':
                        this.generateBomPDF(doc, data);
                        break;
                    default:
                        throw new Error(`Unknown template: ${template}`);
                }

                // Add footer
                this.addFooter(doc);

                doc.end();

                stream.on('finish', () => {
                    resolve(outputPath);
                });

                stream.on('error', (error) => {
                    reject(error);
                });

            } catch (error) {
                reject(error);
            }
        });
    }

    addCompanyHeader(doc) {
        const { companyConfig } = this;

        // Company name
        doc.fontSize(20).font('Helvetica-Bold').text(companyConfig.name, { align: 'center' });
        doc.moveDown(0.5);

        // Address and contact
        doc.fontSize(10).font('Helvetica').text(companyConfig.address, { align: 'center' });
        doc.text(`${companyConfig.phone} | ${companyConfig.email}`, { align: 'center' });
        doc.text(`GSTIN: ${companyConfig.gstin}`, { align: 'center' });
        doc.moveDown(1);

        // Add a line separator
        doc.moveTo(50, doc.y).lineTo(545, doc.y).stroke();
        doc.moveDown(1);
    }

    addFooter(doc) {
        const { companyConfig } = this;
        const bottom = doc.page.height - 50;

        doc.fontSize(8).font('Helvetica')
            .text(`Generated by ${companyConfig.name} ERP System`, 50, bottom, { align: 'center' })
            .text(`Website: ${companyConfig.website}`, { align: 'center' });
    }

    generateQuotationPDF(doc, data) {
        // Header
        doc.fontSize(16).font('Helvetica-Bold').text('QUOTATION', { align: 'center' });
        doc.moveDown(1);

        // Quotation details
        doc.fontSize(12).font('Helvetica-Bold').text(`Quotation No: ${data.quotation_id}`);
        doc.font('Helvetica').text(`Date: ${new Date(data.date).toLocaleDateString()}`);
        doc.text(`Valid Until: ${new Date(data.valid_until).toLocaleDateString()}`);
        doc.moveDown(1);

        // Client details
        doc.font('Helvetica-Bold').text('Bill To:');
        doc.font('Helvetica').text(data.client_name);
        if (data.client_address) doc.text(data.client_address);
        if (data.client_gstin) doc.text(`GSTIN: ${data.client_gstin}`);
        doc.moveDown(1);

        // Items table
        this.addItemsTable(doc, data.items, 'quotation');

        // Terms and conditions
        if (data.terms_conditions) {
            doc.moveDown(2);
            doc.font('Helvetica-Bold').text('Terms & Conditions:');
            doc.font('Helvetica').text(data.terms_conditions);
        }

        // Profit margin warning
        if (data.profit_percentage < 10) {
            doc.moveDown(1);
            doc.font('Helvetica-Bold').fillColor('red')
                .text(`⚠️ WARNING: Profit margin is only ${data.profit_percentage}%`, { align: 'center' });
            doc.fillColor('black');
        }
    }

    generateInvoicePDF(doc, data) {
        // Header
        doc.fontSize(16).font('Helvetica-Bold').text('TAX INVOICE', { align: 'center' });
        doc.moveDown(1);

        // Invoice details
        doc.fontSize(12).font('Helvetica-Bold').text(`Invoice No: ${data.invoice_number}`);
        doc.font('Helvetica').text(`Date: ${new Date(data.invoice_date).toLocaleDateString()}`);
        doc.text(`Due Date: ${new Date(data.due_date).toLocaleDateString()}`);
        doc.moveDown(1);

        // Billing & Shipping details
        const halfWidth = (doc.page.width - 100) / 2;

        // Billing Address
        doc.font('Helvetica-Bold').text('Bill To:', 50, doc.y);
        doc.font('Helvetica').text(data.customer_name, 50, doc.y + 15);
        if (data.customer_address) {
            const addressLines = data.customer_address.split('\n');
            addressLines.forEach((line, index) => {
                doc.text(line, 50, doc.y + 15 + (index + 1) * 12);
            });
        }
        if (data.customer_gstin) doc.text(`GSTIN: ${data.customer_gstin}`, 50, doc.y + 15);

        // Shipping Address (if different)
        if (data.shipping_address && data.shipping_address !== data.customer_address) {
            doc.font('Helvetica-Bold').text('Ship To:', 50 + halfWidth, doc.y - 30);
            doc.font('Helvetica').text(data.customer_name, 50 + halfWidth, doc.y - 15);
            const shipLines = data.shipping_address.split('\n');
            shipLines.forEach((line, index) => {
                doc.text(line, 50 + halfWidth, doc.y - 15 + (index + 1) * 12);
            });
        }

        doc.moveDown(4);

        // Items table
        this.addItemsTable(doc, data.items, 'invoice');

        // Payment details
        doc.moveDown(2);
        doc.font('Helvetica-Bold').text('Payment Details:');
        doc.font('Helvetica').text(`Payment Terms: ${data.payment_terms || 'Net 30'}`);
        doc.text(`Payment Status: ${data.payment_status || 'Unpaid'}`);
    }

    generateDeliveryChallanPDF(doc, data) {
        // Header
        doc.fontSize(16).font('Helvetica-Bold').text('DELIVERY CHALLAN', { align: 'center' });
        doc.moveDown(1);

        // DC details
        doc.fontSize(12).font('Helvetica-Bold').text(`DC No: ${data.dc_number}`);
        doc.font('Helvetica').text(`Date: ${new Date(data.dc_date).toLocaleDateString()}`);
        if (data.delivery_date) doc.text(`Delivery Date: ${new Date(data.delivery_date).toLocaleDateString()}`);
        doc.moveDown(1);

        // Customer details
        doc.font('Helvetica-Bold').text('Delivered To:');
        doc.font('Helvetica').text(data.customer_name);
        if (data.shipping_address) doc.text(data.shipping_address);
        if (data.customer_gstin) doc.text(`GSTIN: ${data.customer_gstin}`);
        doc.moveDown(1);

        // Transport details
        if (data.vehicle_number || data.driver_name) {
            doc.font('Helvetica-Bold').text('Transport Details:');
            doc.font('Helvetica');
            if (data.vehicle_number) doc.text(`Vehicle: ${data.vehicle_number}`);
            if (data.driver_name) doc.text(`Driver: ${data.driver_name}`);
            if (data.driver_contact) doc.text(`Contact: ${data.driver_contact}`);
            doc.moveDown(1);
        }

        // Items table
        this.addItemsTable(doc, data.items, 'delivery_challan');
    }

    generatePurchaseOrderPDF(doc, data) {
        // Header
        doc.fontSize(16).font('Helvetica-Bold').text('PURCHASE ORDER', { align: 'center' });
        doc.moveDown(1);

        // PO details
        doc.fontSize(12).font('Helvetica-Bold').text(`PO No: ${data.po_id}`);
        doc.font('Helvetica').text(`Date: ${new Date(data.date).toLocaleDateString()}`);
        doc.moveDown(1);

        // Supplier details
        doc.font('Helvetica-Bold').text('Supplier:');
        doc.font('Helvetica').text(data.supplier_name);
        if (data.supplier_address) doc.text(data.supplier_address);
        if (data.supplier_gstin) doc.text(`GSTIN: ${data.supplier_gstin}`);
        doc.moveDown(1);

        // Delivery details
        if (data.delivery_date || data.delivery_terms) {
            doc.font('Helvetica-Bold').text('Delivery Details:');
            doc.font('Helvetica');
            if (data.delivery_date) doc.text(`Delivery Date: ${new Date(data.delivery_date).toLocaleDateString()}`);
            if (data.delivery_terms) doc.text(`Terms: ${data.delivery_terms}`);
            doc.moveDown(1);
        }

        // Items table
        this.addItemsTable(doc, data.items, 'purchase_order');

        // Terms
        if (data.payment_terms) {
            doc.moveDown(2);
            doc.font('Helvetica-Bold').text('Payment Terms:');
            doc.font('Helvetica').text(data.payment_terms);
        }
    }

    generateEstimationPDF(doc, data) {
        // Header
        doc.fontSize(16).font('Helvetica-Bold').text('TECHNICAL ESTIMATION', { align: 'center' });
        doc.moveDown(1);

        // Estimation details
        doc.fontSize(12).font('Helvetica-Bold').text(`Estimation No: ${data.estimation_id}`);
        doc.font('Helvetica').text(`Date: ${new Date(data.date).toLocaleDateString()}`);
        doc.moveDown(1);

        // Project details
        doc.font('Helvetica-Bold').text('Project:');
        doc.font('Helvetica').text(data.project_name);
        if (data.description) doc.text(data.description);
        doc.moveDown(1);

        // Sections and items
        data.sections.forEach(section => {
            doc.font('Helvetica-Bold').text(section.name);
            doc.moveDown(0.5);

            if (section.items && section.items.length > 0) {
                this.addItemsTable(doc, section.items, 'estimation');
            }
            doc.moveDown(1);
        });

        // Summary
        doc.moveDown(2);
        doc.font('Helvetica-Bold').text('Summary:');
        doc.font('Helvetica');
        doc.text(`Total MRP: ₹${data.total_mrp?.toLocaleString() || 'N/A'}`);
        doc.text(`Total Final Amount: ₹${data.total_final?.toLocaleString() || 'N/A'}`);
        doc.text(`Total Discount: ₹${data.total_discount?.toLocaleString() || 'N/A'}`);
    }

    generateBomPDF(doc, data) {
        // Header
        doc.fontSize(16).font('Helvetica-Bold').text('BILL OF MATERIALS', { align: 'center' });
        doc.moveDown(1);

        // BOM details
        doc.fontSize(12).font('Helvetica-Bold').text(`BOM No: ${data.bom_id}`);
        doc.font('Helvetica').text(`Date: ${new Date().toLocaleDateString()}`);
        doc.text(`Project: ${data.project_name}`);
        doc.moveDown(1);

        // Materials table
        this.addItemsTable(doc, data.materials, 'bom');
    }

    addItemsTable(doc, items, type) {
        if (!items || items.length === 0) return;

        const tableTop = doc.y + 10;
        const itemCodeX = 50;
        const descriptionX = 120;
        const hsnX = 300;
        const qtyX = 350;
        const rateX = 400;
        const discountX = 450;
        const amountX = 500;

        // Table headers
        doc.font('Helvetica-Bold').fontSize(10);
        doc.text('S.No', 50, tableTop);
        doc.text('Item', itemCodeX, tableTop);
        doc.text('Description', descriptionX, tableTop);
        doc.text('HSN', hsnX, tableTop);
        doc.text('Qty', qtyX, tableTop);

        if (type === 'quotation' || type === 'invoice') {
            doc.text('Rate', rateX, tableTop);
            doc.text('Disc%', discountX, tableTop);
            doc.text('Amount', amountX, tableTop);
        } else if (type === 'purchase_order') {
            doc.text('Rate', rateX, tableTop);
            doc.text('Amount', amountX, tableTop);
        } else {
            doc.text('Unit', rateX, tableTop);
        }

        // Header line
        doc.moveTo(50, tableTop + 15).lineTo(545, tableTop + 15).stroke();

        // Items
        doc.font('Helvetica').fontSize(9);
        let y = tableTop + 25;
        let totalAmount = 0;

        items.forEach((item, index) => {
            const itemAmount = (item.quantity || 0) * (item.final_price || item.unit_price || 0);
            totalAmount += itemAmount;

            doc.text((index + 1).toString(), 50, y);
            doc.text(item.item_code || item.product_code || '', itemCodeX, y);
            doc.text(item.description || item.product_name || '', descriptionX, y, { width: 170 });
            doc.text(item.hsn_sac || '', hsnX, y);
            doc.text(item.quantity?.toString() || '', qtyX, y);

            if (type === 'quotation' || type === 'invoice') {
                doc.text(item.unit_price?.toString() || '', rateX, y);
                doc.text(item.discount_percentage?.toString() || '0', discountX, y);
                doc.text(itemAmount.toFixed(2), amountX, y);
            } else if (type === 'purchase_order') {
                doc.text(item.unit_price?.toString() || '', rateX, y);
                doc.text(itemAmount.toFixed(2), amountX, y);
            } else {
                doc.text(item.unit || '', rateX, y);
            }

            y += 20;

            // Page break if needed
            if (y > doc.page.height - 100) {
                doc.addPage();
                y = 50;
            }
        });

        // Total
        if (type === 'quotation' || type === 'invoice' || type === 'purchase_order') {
            doc.moveTo(400, y).lineTo(545, y).stroke();
            doc.font('Helvetica-Bold').text('Total:', 450, y + 10);
            doc.text(`₹${totalAmount.toFixed(2)}`, amountX, y + 10);
        }
    }

    // Generate document ID
    generateDocumentId(type, year = new Date().getFullYear().toString().slice(-2)) {
        // This would typically query the database for the next sequence number
        // For now, return a placeholder
        const prefixes = {
            quotation: 'Q',
            invoice: 'I',
            delivery_challan: 'DC',
            purchase_order: 'PO',
            estimation: 'ES',
            bom: 'BOM'
        };

        const prefix = prefixes[type] || 'DOC';
        return `VESPL/${prefix}/${year}/XXX`;
    }
}

module.exports = new DocumentGenerator();