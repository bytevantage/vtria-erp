#!/usr/bin/expect -f

set timeout 120
spawn ssh -p 65002 -o StrictHostKeyChecking=no u570718221@82.25.125.174

expect {
    "password:" {
        send "Ananyar@1\r"
        exp_continue
    }
    "$ " {
        send "cd /home/u570718221/domains/api.bytevantage.in/public_html/api\r"
        expect "$ "
        
        # Add payment API endpoints to server.js
        send "cat >> payment_api_routes.txt << 'EOF'\r"
        expect "> "
        send "\r"
        expect "> "
        send "// Payment Management API Endpoints\r"
        expect "> "
        send "app.get('/api/admin/payments', (req, res) => {\r"
        expect "> "
        send "  const mockPayments = [\r"
        expect "> "
        send "    {\r"
        expect "> "
        send "      id: 1,\r"
        expect "> "
        send "      license_id: 'DEMO-FINAL-1757364048173',\r"
        expect "> "
        send "      customer_name: 'ABC Corp',\r"
        expect "> "
        send "      license_key: 'DEMO-FINAL-1757364048173',\r"
        expect "> "
        send "      amount: 35000,\r"
        expect "> "
        send "      payment_date: '2025-09-09T10:00:00Z',\r"
        expect "> "
        send "      payment_type: 'License Purchase',\r"
        expect "> "
        send "      payment_status: 'completed',\r"
        expect "> "
        send "      transaction_id: 'TXN123456789'\r"
        expect "> "
        send "    },\r"
        expect "> "
        send "    {\r"
        expect "> "
        send "      id: 2,\r"
        expect "> "
        send "      license_id: 'DEMO-BASIC-1757364048174',\r"
        expect "> "
        send "      customer_name: 'XYZ Ltd',\r"
        expect "> "
        send "      license_key: 'DEMO-BASIC-1757364048174',\r"
        expect "> "
        send "      amount: 25000,\r"
        expect "> "
        send "      payment_date: '2025-09-08T14:30:00Z',\r"
        expect "> "
        send "      payment_type: 'License Purchase',\r"
        expect "> "
        send "      payment_status: 'completed',\r"
        expect "> "
        send "      transaction_id: 'TXN987654321'\r"
        expect "> "
        send "    }\r"
        expect "> "
        send "  ];\r"
        expect "> "
        send "  res.json({ success: true, payments: mockPayments });\r"
        expect "> "
        send "});\r"
        expect "> "
        send "\r"
        expect "> "
        send "app.put('/api/admin/payments/:id/amount', (req, res) => {\r"
        expect "> "
        send "  const paymentId = req.params.id;\r"
        expect "> "
        send "  const { new_amount, reason, edited_by } = req.body;\r"
        expect "> "
        send "  \r"
        expect "> "
        send "  console.log('Payment edit request:', { paymentId, new_amount, reason, edited_by });\r"
        expect "> "
        send "  \r"
        expect "> "
        send "  res.json({ \r"
        expect "> "
        send "    success: true, \r"
        expect "> "
        send "    message: 'Payment amount updated from original to ' + new_amount + '. Reason: ' + reason\r"
        expect "> "
        send "  });\r"
        expect "> "
        send "});\r"
        expect "> "
        send "\r"
        expect "> "
        send "app.get('/api/admin/payments/:id/history', (req, res) => {\r"
        expect "> "
        send "  const paymentId = req.params.id;\r"
        expect "> "
        send "  const mockHistory = [\r"
        expect "> "
        send "    {\r"
        expect "> "
        send "      old_amount: 30000,\r"
        expect "> "
        send "      new_amount: 35000,\r"
        expect "> "
        send "      reason: 'Price adjustment for additional features',\r"
        expect "> "
        send "      edited_by: 'admin',\r"
        expect "> "
        send "      edited_at: '2025-09-09T12:00:00Z'\r"
        expect "> "
        send "    }\r"
        expect "> "
        send "  ];\r"
        expect "> "
        send "  res.json({ success: true, history: mockHistory });\r"
        expect "> "
        send "});\r"
        expect "> "
        send "\r"
        expect "> "
        send "EOF\r"
        expect "$ "
        
        # Append the payment routes to server.js before the error handler
        send "sed -i '/\\/\\*\\* Error Handler \\*\\//i\\// Payment API Routes\\nrequire(\"./payment_api_routes.txt\");\\n' server.js\r"
        expect "$ "
        
        send "echo 'Payment API endpoints added to server.js'\r"
        expect "$ "
        
        send "exit\r"
    }
    timeout {
        puts "Connection timed out"
        exit 1
    }
    eof
}