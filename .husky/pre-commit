#!/usr/bin/env sh
. "$(dirname -- "$0")/_/husky.sh"

echo "üîç Running pre-commit checks for VTRIA ERP..."

# 1. Check for sensitive data
if git diff --cached --name-only | xargs grep -l "PASSWORD\|SECRET\|KEY\|TOKEN"; then
  echo "‚ùå Error: Potential sensitive data detected in staged files"
  exit 1
fi

# 2. Run lint-staged
echo "üîß Running linters and formatters..."
npx lint-staged || {
  echo "‚ùå Linting/formatting failed"
  exit 1
}

# 3. Run type checking for TypeScript projects
if [ -d "client" ]; then
  echo "üîç Type checking client code..."
  cd client && npm run type-check && cd .. || {
    echo "‚ùå Type checking failed"
    exit 1
  }
fi

# 4. Run tests in watch mode
if [ -d "client" ]; then
  echo "üß™ Running client tests..."
  cd client && CI=true npm test -- --watchAll=false --passWithNoTests && cd .. || {
    echo "‚ùå Client tests failed"
    exit 1
  }
fi

if [ -d "api" ]; then
  echo "üß™ Running API tests..."
  cd api && npm test && cd .. || {
    echo "‚ùå API tests failed"
    exit 1
  }
fi

# 5. Check for console.log statements in production code
echo "üîé Checking for console.log statements..."
if git diff --cached --name-only | xargs grep -l "console\.log"; then
  echo "‚ùå Error: console.log statements found in staged files"
  exit 1
fi

echo "‚úÖ All pre-commit checks passed!"

# Check for console.log in production files (excluding development/test files)
if grep -r "console\.log" --include="*.js" --include="*.jsx" --include="*.ts" --include="*.tsx" \
   --exclude-dir=node_modules --exclude-dir=build --exclude-dir=dist \
   --exclude="*.test.*" --exclude="*.spec.*" --exclude="*.dev.*" .; then
    echo "‚ùå console.log found in production code. Please remove or replace with proper logging."
    exit 1
fi

# Check for debugger statements
if grep -r "debugger" --include="*.js" --include="*.jsx" --include="*.ts" --include="*.tsx" \
   --exclude-dir=node_modules --exclude-dir=build --exclude-dir=dist .; then
    echo "‚ùå debugger statements found. Please remove before committing."
    exit 1
fi

# Check for hardcoded passwords or secrets
if grep -ri "password.*=" --include="*.js" --include="*.jsx" --include="*.ts" --include="*.tsx" \
   --exclude-dir=node_modules --exclude-dir=build --exclude-dir=dist \
   --exclude="*.test.*" --exclude="*.spec.*" . | grep -v "passwordHash\|passwordField\|passwordInput\|passwordValidation"; then
    echo "‚ùå Potential hardcoded passwords found. Please review and use environment variables."
    exit 1
fi

# Check for API keys in code
if grep -ri "api.*key.*=" --include="*.js" --include="*.jsx" --include="*.ts" --include="*.tsx" \
   --exclude-dir=node_modules --exclude-dir=build --exclude-dir=dist \
   --exclude="*.test.*" --exclude="*.spec.*" .; then
    echo "‚ùå Potential API keys found in code. Please use environment variables."
    exit 1
fi

# Warn about TODO comments
if grep -r "TODO\|FIXME\|HACK" --include="*.js" --include="*.jsx" --include="*.ts" --include="*.tsx" \
   --exclude-dir=node_modules --exclude-dir=build --exclude-dir=dist .; then
    echo "‚ö†Ô∏è  TODO/FIXME/HACK comments found. Consider addressing before production."
fi

# Check TypeScript compilation (if tsconfig exists)
if [ -f "client/tsconfig.json" ]; then
    echo "üîß Checking TypeScript compilation..."
    cd client && npx tsc --noEmit && cd ..
    if [ $? -ne 0 ]; then
        echo "‚ùå TypeScript compilation failed. Please fix errors before committing."
        exit 1
    fi
fi

# Run tests
echo "üß™ Running tests..."
npm run test 2>/dev/null || echo "‚ö†Ô∏è  Tests not configured or failed. Consider adding tests."

echo "‚úÖ Pre-commit checks completed successfully!"