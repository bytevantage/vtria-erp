#!/usr/bin/env sh
. "$(dirname -- "$0")/_/husky.sh"

# VTRIA ERP Commit Message Validation
# Enforces conventional commit format: type(scope): description

commit_regex='^(feat|fix|docs|style|refactor|test|chore|perf|ci|build|revert)(\(.+\))?: .{1,50}'

if ! grep -qE "$commit_regex" "$1"; then
    echo "❌ Invalid commit message format!"
    echo ""
    echo "Commit message must follow the format:"
    echo "type(scope): description"
    echo ""
    echo "Types:"
    echo "  feat:     A new feature"
    echo "  fix:      A bug fix"
    echo "  docs:     Documentation only changes"
    echo "  style:    Changes that do not affect code meaning (formatting, etc.)"
    echo "  refactor: A code change that neither fixes a bug nor adds a feature"
    echo "  test:     Adding missing tests or correcting existing tests"
    echo "  chore:    Changes to build process or auxiliary tools"
    echo "  perf:     A code change that improves performance"
    echo "  ci:       Changes to CI configuration files and scripts"
    echo "  build:    Changes that affect the build system or dependencies"
    echo "  revert:   Reverts a previous commit"
    echo ""
    echo "Examples:"
    echo "  feat(auth): add user authentication"
    echo "  fix(api): resolve database connection timeout"
    echo "  docs(readme): update installation instructions"
    echo "  style: format code with prettier"
    echo ""
    echo "Your commit message:"
    cat "$1"
    echo ""
    exit 1
fi

# Check commit message length
commit_message=$(cat "$1")
if [ ${#commit_message} -gt 72 ]; then
    echo "⚠️  Commit message is longer than 72 characters. Consider shortening."
fi

# Check for issue references
if echo "$commit_message" | grep -q "#[0-9]"; then
    echo "✅ Issue reference found in commit message."
fi

echo "✅ Commit message format is valid!"