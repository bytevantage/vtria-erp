/**
 * Case Routes for VTRIA ERP Queue-based Workflow
 * REST API endpoints for case lifecycle management
 */

const express = require('express');
const { body, validationResult, param } = require('express-validator');
const CaseController = require('../controllers/caseController');
const auth = require('../middleware/auth');
const rbac = require('../middleware/rbac');
const { licenseMiddleware } = require('../middleware/license');

const router = express.Router();

// Apply middleware to all routes
router.use(auth);
router.use(licenseMiddleware);

// Validation middleware
const validateCaseCreation = [
  body('title').trim().isLength({ min: 5, max: 200 }).withMessage('Title must be 5-200 characters'),
  body('description').optional().trim().isLength({ max: 2000 }).withMessage('Description max 2000 characters'),
  body('priority').optional().isIn(['low', 'medium', 'high', 'critical']).withMessage('Invalid priority'),
  body('customer_name').optional().trim().isLength({ max: 100 }),
  body('customer_contact').optional().trim().isLength({ max: 50 }),
  body('customer_email').optional().isEmail(),
  body('estimated_value').optional().isNumeric()
];

const validateStatusUpdate = [
  param('id').isUUID().withMessage('Invalid case ID'),
  body('status').isIn(['enquiry', 'estimation', 'quotation', 'purchase_enquiry', 'po_pi', 'grn', 'manufacturing', 'invoicing', 'closure', 'rejected', 'on_hold']).withMessage('Invalid status'),
  body('reason').optional().trim().isLength({ max: 500 })
];

const validateAssignment = [
  param('id').isUUID().withMessage('Invalid case ID'),
  body('assignee_id').isUUID().withMessage('Invalid assignee ID'),
  body('reason').optional().trim().isLength({ max: 500 })
];

const validateNote = [
  param('id').isUUID().withMessage('Invalid case ID'),
  body('note_text').trim().isLength({ min: 1, max: 2000 }).withMessage('Note text required, max 2000 characters'),
  body('note_type').optional().isIn(['general', 'status_change', 'assignment', 'customer_communication', 'internal', 'system']),
  body('is_internal').optional().isBoolean(),
  body('is_customer_visible').optional().isBoolean()
];

/**
 * GET /api/cases
 * Get all cases with filtering and pagination
 */
router.get('/', CaseController.getCases);

/**
 * POST /api/cases
 * Create new case (Sales Admin, Manager, Director)
 */
router.post('/', 
  rbac(['Sales Admin', 'Manager', 'Director']),
  validateCaseCreation,
  CaseController.createCase
);

/**
 * GET /api/cases/queue/:queueId?
 * Get queue cases for current user
 */
router.get('/queue/:queueId?', CaseController.getQueueCases);

/**
 * GET /api/cases/aging/summary
 * Get case aging summary
 */
router.get('/aging/summary', CaseController.getCaseAgingSummary);

/**
 * GET /api/cases/:id
 * Get specific case by ID
 */
router.get('/:id', 
  param('id').isUUID(),
  CaseController.getCaseById
);

/**
 * PUT /api/cases/:id/status
 * Update case status (role-based permissions)
 */
router.put('/:id/status',
  validateStatusUpdate,
  CaseController.updateCaseStatus
);

/**
 * PUT /api/cases/:id/assign
 * Assign case to user (Manager, Director)
 */
router.put('/:id/assign',
  rbac(['Manager', 'Director']),
  validateAssignment,
  CaseController.assignCase
);

/**
 * PUT /api/cases/:id/pick
 * Pick case from queue (self-assignment)
 */
router.put('/:id/pick',
  param('id').isUUID(),
  CaseController.pickCase
);

/**
 * PUT /api/cases/:id/reject
 * Reject case with reason
 */
router.put('/:id/reject',
  param('id').isUUID(),
  body('reason').trim().isLength({ min: 5, max: 500 }).withMessage('Rejection reason required'),
  CaseController.rejectCase
);

/**
 * PUT /api/cases/:id/close
 * Close case (final status)
 */
router.put('/:id/close',
  param('id').isUUID(),
  body('reason').optional().trim().isLength({ max: 500 }),
  body('final_value').optional().isNumeric(),
  body('actual_hours').optional().isNumeric(),
  CaseController.closeCase
);

/**
 * POST /api/cases/:id/notes
 * Add note to case
 */
router.post('/:id/notes',
  validateNote,
  CaseController.addCaseNote
);

/**
 * GET /api/cases/:id/notes
 * Get case notes
 */
router.get('/:id/notes',
  param('id').isUUID(),
  CaseController.getCaseNotes
);

/**
 * GET /api/cases/:id/history
 * Get case status history
 */
router.get('/:id/history',
  param('id').isUUID(),
  CaseController.getCaseHistory
);

/**
 * GET /api/cases/:id/workflow
 * Get case workflow data for Chart.js
 */
router.get('/:id/workflow',
  param('id').isUUID(),
  CaseController.getCaseWorkflow
);

module.exports = router;
